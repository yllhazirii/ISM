services:
#
#  db:
#    image: postgres:17
#    restart: always
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
#      interval: 10s
#      retries: 5
#      start_period: 60s
#      timeout: 10s
#    volumes:
#      - app-db-data:/var/lib/postgresql/data/pgdata
#    env_file:
#      - .env
#    environment:
#      - PGDATA=/var/lib/postgresql/data/pgdata
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
#      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
#      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  # MSSQL service
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    platform: linux/amd64
    restart: always
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: ${MSSQL_SA_PASSWORD?Variable not set}
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Developer"  # Free developer edition
      MSSQL_DATABASE: ${MSSQL_DB?Variable not set}
    volumes:
      - app-mssql-data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'ISMContainers2025' -d master -Q 'SELECT 1' -b -C"]
      interval: 10s
      retries: 5
      start_period: 30s

  prestart:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    networks:
      - default
    depends_on:
#      db:
#        condition: service_healthy
#        restart: true
      mssql:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - default
    depends_on:
      mssql:
        condition: service_healthy
        restart: true
#      db:
#        condition: service_healthy
#        restart: true
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - MSSQL_SERVER=mssql      # Docker service name
      - MSSQL_PORT=${MSSQL_PORT:-1433}
      - MSSQL_DB=${MSSQL_DB}
      - MSSQL_USER=${MSSQL_USER}
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}
#    volumes:
#      - ./backend/app/alembic:/app/app/alembic
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5
    build:
      context: ./backend

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://api.${DOMAIN?Variable not set}
        - NODE_ENV=production

volumes:
  app-db-data:
  app-mssql-data:

